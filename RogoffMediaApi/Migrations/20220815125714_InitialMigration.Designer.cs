// <auto-generated />
using System;
using EntityFrameworkLibrary;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace RogoffMediaApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220815125714_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RogoffMediaLibrary.Models.CommentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("DateTimeCreated");

                    b.Property<DateTime?>("DateTimeEdited")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("DateTimeEdited");

                    b.Property<DateTime?>("DateTimeLastStatusChange")
                        .IsRequired()
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("DateTimeLastStatusChange");

                    b.Property<string>("EditedContent")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("EditedContent");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit")
                        .HasColumnName("IsEdited");

                    b.Property<int>("Likes")
                        .HasColumnType("int")
                        .HasColumnName("Likes");

                    b.Property<string>("OriginalContent")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("OriginalContent");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("PostId");

                    b.Property<string>("ReasonForRemoval")
                        .HasColumnType("varchar(64)")
                        .HasColumnName("ReasonForRemoval");

                    b.Property<string>("RemovalDetails")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("RemovalDetails");

                    b.Property<string>("RepliesIdString")
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Replies");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("RogoffMediaLibrary.Models.PostModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CommentsIdString")
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Comments");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("DateTimeCreated");

                    b.Property<DateTime?>("DateTimeEdited")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("DateTimeEdited");

                    b.Property<DateTime?>("DateTimeLastStatusChange")
                        .IsRequired()
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("DateTimeLastStatusChange");

                    b.Property<string>("EditedContent")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("EditedContent");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit")
                        .HasColumnName("IsEdited");

                    b.Property<int>("Likes")
                        .HasColumnType("int")
                        .HasColumnName("Likes");

                    b.Property<int>("OriginalAuthorId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("OriginalAuthorId");

                    b.Property<string>("OriginalContent")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("OriginalContent");

                    b.Property<string>("ReasonForRemoval")
                        .HasColumnType("varchar(64)")
                        .HasColumnName("ReasonForRemoval");

                    b.Property<string>("RemovalDetails")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("RemovalDetails");

                    b.Property<string>("RepostsIdString")
                        .HasColumnType("varchar(max)")
                        .HasColumnName("RepostListOfIds");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Status");

                    b.Property<int>("UserId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("OriginalAuthorId");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("Id");

                    b.HasIndex("UserId");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("RogoffMediaLibrary.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AboutContent")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("AboutContent");

                    b.Property<int?>("AccountStrikes")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("AccountStrikes");

                    b.Property<string>("CommentsIdString")
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Comments");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("DateTimeCreated");

                    b.Property<DateTime>("DateTimeLastDisplayNameChange")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("DateTimeLastDisplayNameChange");

                    b.Property<DateTime>("DateTimeLastEmailChange")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("DateTimeLastEmailChange");

                    b.Property<DateTime>("DateTimeLastStatusChange")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("DateTimeLastStatusChange");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("DisplayName");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Email");

                    b.Property<string>("FollowersIdString")
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Followers");

                    b.Property<string>("FollowingIdString")
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Following");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("binary")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PostsIdString")
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Posts");

                    b.Property<byte[]>("ProfilePictureData")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("ProfilePictureData");

                    b.Property<string>("ProfilePictureFiletype")
                        .HasColumnType("varchar(16)")
                        .HasColumnName("ProfilePictureFiletype");

                    b.Property<string>("ReasonForRemoval")
                        .HasColumnType("varchar(64)")
                        .HasColumnName("ReasonForRemoval");

                    b.Property<string>("RemovalDetails")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("RemovalDetails");

                    b.Property<string>("RemovalTimeframe")
                        .HasColumnType("varchar(32)")
                        .HasColumnName("RemovalTimeframe");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Status");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RogoffMediaLibrary.Models.CommentModel", b =>
                {
                    b.HasOne("RogoffMediaLibrary.Models.PostModel", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_Comment_Post");

                    b.HasOne("RogoffMediaLibrary.Models.UserModel", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_Comment_User");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RogoffMediaLibrary.Models.PostModel", b =>
                {
                    b.HasOne("RogoffMediaLibrary.Models.UserModel", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_Post_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RogoffMediaLibrary.Models.PostModel", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("RogoffMediaLibrary.Models.UserModel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
